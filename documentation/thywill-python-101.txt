--------------------------------------
THYWILL 101
--------------------------------------

What is thywill? It is a rudimentary Python framework that glues together a Comet server, a web server, a web browser, and a standalone application. Applications built on top of thywill are Python (server) and Javascript (client) affairs in which the thywill framework manages the asynchronous message delivery between server and clients.

thywill is the result of one programmers short explorations in learning Python and Comet techniques for pushing data to browsers over HTTP connections, while at the same time thinking about architectures to support multi-user HTML5/HTTP applications. e.g. games, the ubiquitous chat servers, client-side Javascript, AJAX, canvas, and the like.

It is working prototype code, in other words, that might be useful to someone.

---------------------------------------
COMPONENT ABSTRACTIONS
---------------------------------------

thywill is glue code, abstractions, and a bootstrap startup framework to hold together some unknown future combination of server and client technologies, as well as support unknown future choices in communication APIs between those servers and clients. It is structured as a set of component abstractions; on connection by a client browser, these are managed into a bootstrap process wherein each component implementation independently contributes configuration directives and Javascript code to load in that client.

The component abstractions at present are as follows:

1) Application Interface
	- manages communication with the application built on top of thywill: the application decides what to do with client messages and what to send back to connected clients.

2) Client Interface
	- manages the interface to the client: accepting messages from the client, assigning client sessions and unique IDs, and so forth.

3) Database
	- manages the database layer.

4) Log
	- manages logging.

5) Push
	- manages sending messages to the client. e.g. via a Comet server.


While any component implementation can be written in the future, the present implementations are as follows: thywill uses Orbited as a Comet server to push data to HTML5 clients over HTTP, via the STOMP protocol. A Django server receives data from HTML clients via AJAX connections. The database is MySQL, and the standard Python logging facility is used to log errors.

---------------------------------------
BOOTSTRAP PROCESS AND TEST APPLICATION
---------------------------------------

The bootstrap process connects a client to the various server components, and makes the system ready for an application built on top of thywill to run. See the image files for a clear explanation of what the components of thywill are, and how the bootstrap process works in practice. After the bootstrap process completes, thywill is then ready to load and run an application written in Python (server side) and Javascript (client side).

A single trivial application and application interface example is provided: a proof of concept application to test that the system is working, and that messages from a specific client - and addressed to that same client - can make the round trip through thywill and return.

--------------------------------------
WHY THYWILL?
--------------------------------------

a) Because it makes it one step easier to build a Comet-based messaging application from scratch in Python.

b) Because you really like working with Python code written by someone who was learning Python at the time.

If you like node.js, then you should use node.js instead - it is a much simpler and more reliable way to produce the same end result achieved in thywill, and can be just as extensible. If you're going to be writing complex client-side Javascript, why not use a  system wherein you can write the server side in Javascript as well? This is an important consideration.

The following caveats apply to using thywill as it is:

- The MorbidQ server that comes with Orbited is not intended for use at scale. You will need to set up a different configuration and use a stand-alone STOMP broker.

- Orbited works but is not as well supported as other similar Comet projects. Consider replacing it with APE ( http://www.ape-project.org/ ) or node.js (and of course writing the component implementations to manage those server instances in the framework).

- The Django client interface component is set up in a development-oriented configuration, completely unsuitable for production use.

- thywill is not tested at scale, or indeed in any way tested comprehensively. It works for the author.

--------------------------------------
THYWILL STARTUP FOR A BROWSER CLIENT
--------------------------------------

This is an outline of the bootstrap process for a browser client. See the image files for diagrams of this process.

- An HTML page is loaded, containing calls to Javascript files that are added in by the various components and the designated application. 

- These Javascript files are divided into bootstrap Javascript and application Javascript.

- The bootstrap Javascript code is loaded first and carries out the process of connecting to the Comet server and setting up data structures as needed.

- The application Javascript code is loaded secondmost - but while the bootstrap process is still continuing. 

- The application Javascript code carries out the following activities:
	- Sets up its own environment for display and data entry
	- Sets callback functions in the main thywill data structure
	- Passes a startup function to thywill that is called when the bootstrap process is complete.

- Thus the application sets itself up in parallel to the bootstrap process, and then waits for confirmation before continuing. 

- The application manages whatever errors are displayed to the user as a result of issues with the bootstrap.

--------------------------------------
DEVELOPMENT SETUP FOR WINDOWS
--------------------------------------

Follow these instructions to set up a development environment on Windows for working with thywill.

- install GitTortoise
	- Which means installing msysgit
	- See: http://code.google.com/p/tortoisegit/

- install Python
	- Default location is C:\Python27
	- Add C:\Python27 and C:\Python27\Scripts to the path

- Install setuptools:
	- Download: http://peak.telecommunity.com/dist/ez_setup.py
	- Put it in C:\Python\Tools\setuptools
	- cd C:\Python27\Tools\setuptools
	- python ez_setup.py setuptools

- To use the setuptools to install Orbited and its dependencies, you'll need a compiler from a MinGW install. See:
	- http://orbited.org/wiki/InstallationWindows
	- Run on command prompt: easy_install orbited
	- But this will fail on Twisted. See:
	- http://blog.eddsn.com/2010/05/unable-to-find-vcvarsall-bat/
	- This is a fairly long install of a GNU environment.
	- If you installed MinGW for example to “C:\MinGW” then add “C:\MinGW\bin” to your path
	- Have to download Twisted directly - the URL will be in the failed attempt
	- Put it into C:\Python27\Lib\site-packages and unzip it, then cd into the Twisted-* folder
	- Once there: python setup.py install build --compiler=mingw32

	- Then go back and install orbited again via easy_install, and it will work

	- Then you have to have copy some files around: see URL above. Only necessary if you want to run orbited versus just using the libraries in development.

- Install the simplejson Python package
	- Docs at: http://simplejson.github.com/simplejson/
	- Run at the command prompt: easy_install simplejson

- Install the stomp.py Python package
	- Docs at: http://code.google.com/p/stomppy/
	- (But note that the wiki examples are very out of date).
	- Run at the command prompt: easy_install stomp.py

- install Django
	- this will create the Django libraries with the Python install

- install Eclipse Classic 3.6.2 or later
	- install PyDev
		- see: http://www.vogella.de/articles/Python/article.html
		- if you avoid a number of odd problems, make sure you completely install Python and Django before installing PyDev. If you install Django afterwards, it won't recognize that it exists, and you'll have to remove the interpreter setting and recreate it.
	- install the Web Page Editor component
		- Help" > "Install New Software" Choose to work with the site for your version of eclipse.
		- Expand "Web, XML and Java EE development", check "Web Page Editor" and click Next to continue with the install

- install MySQL
	- create a database "thywill" and a user "thywill" with password "dummy_password" with permissions to access from localhost

- clone the repository for thywill to your local machine.

- import the projects from the Git repository into Eclipse.
	- /thywill_apps
	- /thywill_server